name: Apigee CI with Maven

# Controls when the workflow will run
on: push

env:
  GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Set Variables depending on branch
      - name: Set Variables for [Main] branch
        if: github.ref == 'refs/heads/main'
        run: |
          echo "APIGEE_ORG=bap-amer-coe-demo1" >> $GITHUB_ENV
          echo "APIGEE_PROFILE=test" >> $GITHUB_ENV
          echo "DEPLOYMENT_USER=cicduser" >> $GITHUB_ENV
          echo "DEPLOYMENT_SUFFIX=$(echo "")" >> $GITHUB_ENV
          echo $GCP_SERVICE_ACCOUNT > sa.json

      - name: Set Variables for [Prod] branch
        if: github.ref == 'refs/heads/prod'
        run: |
          echo "APIGEE_ORG=sai-apigeex-demo" >> $GITHUB_ENV
          echo "APIGEE_PROFILE=prod" >> $GITHUB_ENV
          echo "DEPLOYMENT_USER=cicduser" >> $GITHUB_ENV
          echo "DEPLOYMENT_SUFFIX=$(echo "")" >> $GITHUB_ENV
          echo $GCP_SERVICE_ACCOUNT > sa.json
      
      - name: Set Variables for branch not [Main], not [Prod]
        if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/prod'
        run: |
          echo "APIGEE_ORG=bap-amer-coe-demo1" >> $GITHUB_ENV
          echo "APIGEE_PROFILE=dev" >> $GITHUB_ENV
          echo "DEPLOYMENT_USER=cicduser" >> $GITHUB_ENV
          echo "DEPLOYMENT_SUFFIX=$(echo "")" >> $GITHUB_ENV
          echo $GCP_SERVICE_ACCOUNT > sa.json

      # Create Dependencies (npm) Cache 
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` 
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      
      # Node and npm versions
      - name: Node version
        run: node -v; npm -v

      # Install dependencies (npm)
      - name: Install Dependencies
        run: npm install --silent --no-fund

      # Run Static Code analysis and upload lint results
      - name: Static Code Analysis
        run: npm run lint

      - name: Archive Apigeelint results
        uses: actions/upload-artifact@v4
        with:
          name: apigeelint-report
          path: ./code_test_output/apigeelint-output.html
          retention-days: 5
      
      - name: Archive ESLint results
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: ./code_test_output/eslint-output.html
          retention-days: 5

      # Run Unit Testing and Code Coverage
      - name: Unit Testing and Code Coverage
        run: npm run unit-test

      - name: Archive Code Coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: ./code_test_output/coverage-output.html
          retention-days: 5

      # Setup Maven & Maven Cache
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2   

      # Prepare the config files that are env specific
      - name: Process Resources
        run: mvn -ntp process-resources -P$APIGEE_PROFILE -Dorg=$APIGEE_ORG -Ddeployment.suffix="$DEPLOYMENT_SUFFIX" -Dcommit=$GITHUB_SHA -Dbranch=$GITHUB_REF_NAME -Duser.name=$DEPLOYMENT_USER

      # Configure targetservers (include others if needed)
      - name: Pre-deployment configuration
        run: mvn -ntp apigee-config:targetservers -P$APIGEE_PROFILE -Ddeployment.suffix="$DEPLOYMENT_SUFFIX" -Dorg=$APIGEE_ORG -Dfile=sa.json

      # Package proxy bundle
      - name: Package proxy bundle
        run: mvn -ntp apigee-enterprise:configure -P$APIGEE_PROFILE -Ddeployment.suffix="$DEPLOYMENT_SUFFIX" -Dorg=$APIGEE_ORG -Dfile=sa.json

      # Deploy proxy bundle
      - name: Deploy proxy bundle
        run: mvn -ntp apigee-enterprise:deploy -P$APIGEE_PROFILE -Ddeployment.suffix="$DEPLOYMENT_SUFFIX" -Dorg=$APIGEE_ORG -Dfile=sa.json

      # Configure API Products, developers, apps (Uncomment below if needed)
      # - name: Post-deployment configuration
      #   run: mvn -ntp apigee-config:apiproducts apigee-config:developers apigee-config:apps -P$APIGEE_PROFILE -Ddeployment.suffix="$DEPLOYMENT_SUFFIX" -Dorg=$APIGEE_ORG -Dfile=sa.json

      # Run Functional test
      - name: Functional Testing
        run: npm run integration-test

      #Upload the functional test results
      - name: Archive Functional Testing results
        uses: actions/upload-artifact@v4
        with:
          name: functional-test-report
          path: ./target/cucumber_report.html
          retention-days: 5
       
      # Publish to Portal
      # - name: Publish to portal
      #   run: mvn -ntp apigee-config:apicategories apigee-config:apidocs -P$APIGEE_PROFILE -Dorg=$APIGEE_ORG -Dfile=sa.json
